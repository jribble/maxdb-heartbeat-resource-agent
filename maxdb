#!/bin/sh
#
# maxdb
#
# Description:	Manages a MaxDB database instance
#               as a High-Availability OCF compliant resource.
#
# Author:		Jarrod Ribble, December 2012
# Author:       Alexander Krauth, October 2006
# Support:      none
# License:      GNU General Public License (GPL)
# Copyright:    (c) 2006, 2007 Alexander Krauth; 2012 Jarrod Ribble
#
# An example usage: 
#      See usage() function below for more details...
#
# OCF instance parameters:
#	OCF_RESKEY_DB_NAME				(the database instance name)
#	OCF_RESKEY_MAXDB_DIR			(optional, the database program directory)
#	OCF_RESKEY_DBMUSER	   		    (optional, the database manager user)
#	OCF_RESKEY_DBMPASS			    (optional, the database manager password)
#
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################
#set -vx
SH=/bin/sh

usage() {
  methods=`sapdatabase_methods`
  methods=`echo $methods | tr ' ' '|'`
  cat <<-!
	usage: $0 ($methods)

	$0 manages a MaxDB database instance as an HA resource.

	The 'start' operation starts the instance.
	The 'stop' operation stops the instance.
	The 'status' operation reports whether the instance is running
	The 'monitor' operation reports whether the instance seems to be working
	The 'recover' operation tries to recover the instance after a crash (instance will be stopped first!)
	The 'validate-all' operation reports whether the parameters are valid
	The 'methods' operation reports on the methods $0 supports

	!
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SAPDatabase">
<version>1.93</version>

<longdesc lang="en">
Resource script for MaxDB databases. It manages a MaxDB database instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages a MaxDB database instance</shortdesc>

<parameters>
 <parameter name="DB_NAME" unique="1" required="1">
  <longdesc lang="en">The MaxDB database instance name</longdesc>
  <shortdesc lang="en">Database name</shortdesc>
  <content type="string" default="" />
 </parameter>
 <parameter name="MAXDB_DIR" unique="1" required="0">
  <longdesc lang="en">The MaxDB binary directory</longdesc>
  <shortdesc lang="en">MaxDB directory</shortdesc>
  <content type="string" default="/opt/sdb/globalprograms/bin/" />
 </parameter>
 <parameter name="DBMUSER" unique="1" required="0">
  <longdesc lang="en">The DBM user</longdesc>
  <shortdesc lang="en">DBM user</shortdesc>
  <content type="string" default="DBM" />
 </parameter>
 <parameter name="DBMPASS" unique="1" required="0">
  <longdesc lang="en">The DBM user password</longdesc>
  <shortdesc lang="en">DBM password</shortdesc>
  <content type="string" default="DBM" />
 </parameter>
</parameters>

<actions>
<action name="start" timeout="1800" />
<action name="stop" timeout="1800" />
<action name="status" timeout="60" />
<action name="monitor" depth="0" timeout="60" interval="120" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
<action name="methods" timeout="5" />
</actions>
</resource-agent>
END
}

trap_handler() {
  rm -f $TEMPFILE
  exit $OCF_ERR_GENERIC
}

#
# x_server_start: Start the given x_server
#
x_server_start() {
  local rc=$OCF_SUCCESS
  local output
  output=`${X_SERVER} start 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "MaxDB x_server start: $output"
    lrc=$OCF_SUCCESS
  else
    ocf_log err "MaxDB x_server start failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# x_server_stop: Stop the x_server
#
x_server_stop() {
  local lrc=$OCF_SUCCESS
  local output
  output=`${X_SERVER} stop 2>&1`
  if [ $? -eq 0 ]
  then
    ocf_log info "MaxDB x_server stop: $output"
  else
    ocf_log err "MaxDB x_server stop failed: $output"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# x_server_status: is the x_server running?
#
x_server_status() {
  local lrc=$OCF_SUCCESS
  local sdbuser=`grep "^SdbOwner" /etc/opt/sdb | awk -F'=' '{print $2}'`
  # Note: ps cuts off it's output at column $COLUMNS, so "ps -ef" can not be used here
  # as the output might be to long.
  local cnt=`ps efo args --user $sdbuser | grep -c vserver`
  if [ $cnt -ge 1 ]
  then
    lrc=$OCF_SUCCESS
  else
    ocf_log info "x_server process not running"
    lrc=$OCF_ERR_GENERIC
  fi
  return $lrc
}

#
# maxdb_stop: Stop the MaxDB database without any condition
#
maxdb_stop() {

# x_Server must be running to stop database
x_server_status
if [ $? -ne $OCF_SUCCESS ]; then x_server_start; fi

if [ $DBJ2EE_ONLY -eq 1 ]; then
   userkey=c_J2EE
else
   userkey=c
fi

echo "#!/bin/sh
LOG=\$HOME/stopdb.log
date > \$LOG
echo \"Stop database with xuserkey >$userkey<\" >> \$LOG
dbmcli -U ${userkey} db_offline >> \$LOG 2>&1
exit \$?" > $TEMPFILE

chmod 700 $TEMPFILE

$TEMPFILE
retcode=$?
rm -f $TEMPFILE

if [ $retcode -eq 0 ]; then
  sapdatabase_status
  if [ $? -ne $OCF_NOT_RUNNING ]; then
    retcode=1
  fi
fi

return $retcode
}

#
# maxdb_recover: try to clean up MaxDB after a crash
#
maxdb_recover() {
  # x_Server must be running to stop database
  x_server_status
  if [ $? -ne $OCF_SUCCESS ]; then x_server_start; fi

  if [ $DBJ2EE_ONLY -eq 1 ]; then
     userkey=c_J2EE
  else
     userkey=c
  fi

echo "#!/bin/sh
LOG=\$HOME/recover.log
date > \$LOG
echo \"Logfile written by heartbeat MaxDB resource agent\" >> \$LOG
echo \"Cleanup database with xuserkey >$userkey<\" >> \$LOG
echo \"db_stop\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_stop >> \$LOG 2>&1
echo \"db_clear\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_clear >> \$LOG 2>&1
echo \"db_online\" >> \$LOG 2>&1
dbmcli -U ${userkey} db_online >> \$LOG 2>&1
rc=\$?
cat \$LOG
exit \$rc" > $TEMPFILE

  chmod 700 $TEMPFILE
  chown $sidadm $TEMPFILE

  su - $sidadm -c $TEMPFILE
  retcode=$?
  rm -f $TEMPFILE

  return $retcode
}

#
# methods: What methods/operations do we support?
#
sapdatabase_methods() {
  cat <<-!
	start
	stop
	status
	monitor
        recover
	validate-all
	methods
	meta-data
	usage
	!
}


#
# sapdatabase_start : Start the SAP database
#
sapdatabase_start() {

  x_server_start

  output=`${DBMCLI} -d ${DB_NAME} -u ${DBMUSER},${DBMPASS} db_warm> /dev/null 2>&1`
  rc=$?

  if [ $rc -eq 0 ]
  then
    ocf_log info "SAP database $SID started: $output"
    rc=$OCF_SUCCESS
  else
    ocf_log err "SAP database $SID start failed: $output"
    rc=$OCF_ERR_GENERIC
  fi

  return $rc
}

#
# sapdatabase_stop: Stop the SAP database
#
sapdatabase_stop() {
  
  output=`${DBMCLI} -d ${DB_NAME} -u ${DBMUSER},${DBMPASS} db_offline> /dev/null 2>&1`

  if [ $? -eq 0 ]
  then
    ocf_log info "SAP database $SID stopped: $output"
    rc=$OCF_SUCCESS
  else
    ocf_log err "SAP database $SID stop failed: $output"
    rc=$OCF_ERR_GENERIC
  fi

  x_server_stop

  return $rc
}


#
# sapdatabase_monitor: Can the given database instance do anything useful?
#
sapdatabase_monitor() {
#  strict=$1

  sapdatabase_status
  rc=$?
  if [ $rc -ne $OCF_SUCCESS ]; then
    return $rc
  fi
  
  x_server_status
  if [ $? -ne $OCF_SUCCESS ]; then x_server_start; fi

#  if [ $strict -eq 0 ]
#  then
#    return $rc
#  fi

  if [ $rc -ne $OCF_SUCCESS ]
  then
    ocf_log err "The SAP database $SID ist not running: $output"
  fi
  return $rc
}


#
# sapdatabase_status: Are there any database processes on this host ?
#
sapdatabase_status() {

  SEARCH="/opt/sdb/MaxDB/pgm/kernel"
  SUSER=`grep "^SdbOwner" /etc/opt/sdb | awk -F'=' '{print $2}'`
  SNUM=2

  # Note: ps cuts off it's output at column $COLUMNS, so "ps -ef" can not be used here
  # as the output might be to long.
  cnt=`ps efo args --user $SUSER 2> /dev/null | grep -c "$SEARCH"`
  if [ $cnt -ge $SNUM ]
  then
    rc=$OCF_SUCCESS
  else
    # ocf_log info "Database Instance $SID is not running on `hostname`"
    rc=$OCF_NOT_RUNNING
  fi
  return $rc
}


#
# sapdatabase_recover:
#
sapdatabase_recover() {
  
  recoutput=`maxdb_recover`

  sapdatabase_monitor 1
  retcode=$?

  if [ $retcode -eq $OCF_SUCCESS ]
  then
    ocf_log info "Recover of SAP database $SID was successful: $recoutput"
  else
    ocf_log err "Recover of SAP database $SID failed: $recoutput"
  fi

  return $retcode
}


#
# sapdatabase_validate: Check the symantic of the input parameters 
#
sapdatabase_validate() {
  rc=$OCF_SUCCESS

  return $rc
}


#
#	'main' starts here...
#

if
  ( [ $# -ne 1 ] )
then
  usage
  exit $OCF_ERR_ARGS
fi

# Set a tempfile and make sure to clean it up again
TEMPFILE="/tmp/SAPDatabase.$$.tmp"
trap trap_handler INT TERM

# These operations don't require OCF instance parameters to be set
case "$1" in
  meta-data)	meta_data
		exit $OCF_SUCCESS;;

  usage) 	usage
		exit $OCF_SUCCESS;;

  methods)	sapdatabase_methods
		exit $?;;

  *);;
esac

US=`id -u -n`
US=`echo $US`
if
  [ $US != root  ]
then
  ocf_log err "$0 must be run as root"
  exit $OCF_ERR_PERM
fi

# mandatory parameter check
if  [ -z "$OCF_RESKEY_DB_NAME" ]; then
  ocf_log err "Please set OCF_RESKEY_DB_NAME to the database instance name!"
  exit $OCF_ERR_ARGS
fi
DB_NAME=`echo "$OCF_RESKEY_DB_NAME"`
if [ -n "$OCF_RESKEY_MAXDB_DIR" ]
  then
    MAXDB_DIR="$OCF_RESKEY_MAXDB_DIR"
else
    MAXDB_DIR=/opt/sdb/globalprograms/bin/
fi
X_SERVER=${MAXDB_DIR}x_server
DBMCLI=${MAXDB_DIR}dbmcli
if [ -n "$OCF_RESKEY_DBMUSER" ]
  then
    DBMUSER="$OCF_RESKEY_DBMUSER"
else
    DBMUSER=DBM
fi
if [ -n "$OCF_RESKEY_DBMPASS" ]
  then
    DBMPASS="$OCF_RESKEY_DBMPASS"
else
    DBMPASS=DBM
fi

sidadm="root"

# What kind of method was invoked?
case "$1" in

  start)	sapdatabase_start
		exit $?;;

  stop)		sapdatabase_stop
		exit $?;;

  monitor)
          	sapdatabase_monitor
		exit $?;;

  status)
                sapdatabase_status
                exit $?;;

  recover)      sapdatabase_recover
                exit $?;;

  validate-all)	sapdatabase_validate
		exit $?;;

  *)		sapdatabase_methods
		exit $OCF_ERR_UNIMPLEMENTED;;
esac
